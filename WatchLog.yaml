AWSTemplateFormatVersion: '2010-09-09'
Description: 'DemoServer with Watchlog'
Parameters:
  SearchFor:
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The string to search for
    MaxLength: '80'
    MinLength: '5'
    Type: String
  LogFilePath:
    Default: '/var/log/test.log'
    Description: The log file path
    MaxLength: '255'
    MinLength: '3'
    Type: String
  InstanceType:
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: DemoServer EC2 instance type
    Type: String
  KeyName:
    Default: 'Main'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String  
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.large:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-0ffac3e16de16665e
      HVMG2: ami-08e5c166
      PV64: ami-393c1957
    ap-northeast-2:
      HVM64: ami-249b554a
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-c9b572aa
      HVMG2: ami-5a15d239
      PV64: ami-34bd7a57
    ap-southeast-2:
      HVM64: ami-48d38c2b
      HVMG2: ami-0c1a446f
      PV64: ami-ced887ad
    cn-north-1:
      HVM64: ami-43a36a2e
      HVMG2: NOT_SUPPORTED
      PV64: ami-18ac6575
    eu-central-1:
      HVM64: ami-bc5b48d0
      HVMG2: ami-ba1a09d6
      PV64: ami-794a5915
    eu-west-1:
      HVM64: ami-bff32ccc
      HVMG2: ami-83fd23f0
      PV64: ami-95e33ce6
    sa-east-1:
      HVM64: ami-6817af04
      HVMG2: NOT_SUPPORTED
      PV64: ami-7d15ad11
    us-east-1:
      HVM64: ami-60b6c60a
      HVMG2: ami-e998ea83
      PV64: ami-5fb8c835
    us-west-1:
      HVM64: ami-d5ea86b5
      HVMG2: ami-943956f4
      PV64: ami-56ea8636
    us-west-2:
      HVM64: ami-f0091d91
      HVMG2: ami-315f4850
      PV64: ami-d93622b8
Resources:
  DemoServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          watchlog_install:
          - install_cfn
          - install_watchlog
          - configure_watchlog
        configure_watchlog:
          commands:
            01_chmod:
              command: !Sub |
                chmod 755 /usr/local/bin/watchlog.sh
            02_add_test_log:
              command: !Sub |
                touch /var/log/test.log
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DemoServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DemoServer --configsets watchlog_install --url https://stackbuilder.amazonaws.com
              group: root
              mode: '000400'
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_watchlog:
          files:
            /etc/systemd/system/watchlog.service:
              content: !Sub |
                [Unit]
                Description=Watchlog service
                After=network.target
                StartLimitIntervalSec=0

                [Service]
                Type=simple
                Restart=always
                RestartSec=5
                User=root
                ExecStart=/bin/bash /usr/local/bin/watchlog.sh '${SearchFor}' '${LogFilePath}'

                [Install]
                WantedBy=multi-user.target
              group: root
              mode: '000644'
              owner: root
          packages:
            yum:
              bash: []
          services:
            systemd:
              watchlog:
                enabled: true
                ensureRunning: true
          sources:
            /usr/local/bin: https://github.com/vladsf/watchlog/tarball/main
    Properties:
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]      
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: DemoServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           yum update -y aws-cfn-bootstrap
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource DemoServer --configsets watchlog_install --region ${AWS::Region}
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource DemoServer --region ${AWS::Region}
  DemoServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH access"
      SecurityGroupIngress:
      - CidrIp: !Ref SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
Outputs:
  PublicIP:
    Description: EC2 public IP
    Value: !GetAtt DemoServer.PublicIp
  HostName:
    Description: Hostname
    Value: !Sub "${DemoServer.PublicDnsName}"
